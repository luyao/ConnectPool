!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
CC	Makefile	/^CC=~\/bin\/g++$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS=-O0 -g -static -fPIC -finline-functions -Werror -Winline -pipe \\$/;"	m
Checker	include/connect_pool.h	/^class Checker{};$/;"	c	namespace:bladecoder_lib::network
ClassFactory	include/class_factory.h	/^class ClassFactory{$/;"	c
ClassFactoryDict	include/class_factory.h	/^typedef std::map < std::string, CreateFuntion > ClassFactoryDict;$/;"	t
ClassFactoryDictCIter	include/class_factory.h	/^typedef ClassFactoryDict::const_iterator ClassFactoryDictCIter;$/;"	t
ConnectPool	include/connect_pool.h	/^class ConnectPool : virtual public Uncopyable{$/;"	c	namespace:bladecoder_lib::network
ConnectPool	src/connect_pool.cpp	/^ConnectPool::ConnectPool():pImpl_(NULL){}$/;"	f	class:bladecoder_lib::network::ConnectPool
ConnectPoolImplIf	src/connect_pool.cpp	/^DEFINE_CLASS(ConnectPoolImplIf);$/;"	v
CreateFuntion	include/class_factory.h	/^typedef void *(*CreateFuntion) (void);$/;"	t
DECLEAR_CLASS	include/class_factory.h	80;"	d
DECLEAR_CLASS_EX	include/class_factory.h	98;"	d
DECLEAR_CLASS_EX	src/connect_pool.cpp	/^DECLEAR_CLASS_EX(SimplePool, ConnectPoolImplIf){$/;"	f	namespace:bladecoder_lib::network
DECLEAR_INTERFACE	include/class_factory.h	90;"	d
DECLEAR_INTERFACE	src/connect_pool.cpp	/^DECLEAR_INTERFACE(ConnectPoolImplIf ){$/;"	f	namespace:bladecoder_lib::network
DECLEAR_SINGLETON_CLASS	include/class_factory.h	84;"	d
DECLEAR_SINGLETON_CLASS_EX	include/class_factory.h	102;"	d
DEFAULT	include/class_factory.h	/^    void *DEFAULT(){return new (std::nothrow) T;}$/;"	f	namespace:create_function
DEFINE_CLASS	include/class_factory.h	95;"	d
Dispatcher	include/connect_pool.h	/^class Dispatcher{};$/;"	c	namespace:bladecoder_lib::network
FreeHandle	src/connect_pool.cpp	/^int ConnectPool::FreeHandle(Handle &handle)$/;"	f	class:bladecoder_lib::network::ConnectPool
GetChecker	src/connect_pool.cpp	/^const ConnectPool::Checker* GetChecker()const$/;"	f	namespace:bladecoder_lib::network
GetClass	include/class_factory.h	/^    static void *GetClass(const std::string & name){$/;"	f	class:ClassFactory
GetClassName	include/class_factory.h	/^    virtual const char* GetClassName()const{return name_;}$/;"	f	class:NamePrinter
GetDispatcher	src/connect_pool.cpp	/^const ConnectPool::Dispatcher* GetDispatcher()const$/;"	f	namespace:bladecoder_lib::network
GetHandle	src/connect_pool.cpp	/^Handle ConnectPool::GetHandle()const$/;"	f	class:bladecoder_lib::network::ConnectPool
Handle	include/connect_pool.h	/^class Handle{$/;"	c	namespace:bladecoder_lib::network
Handle	src/connect_pool.cpp	/^Handle::Handle():fd_(0){}$/;"	f	class:bladecoder_lib::network::Handle
Handle	src/connect_pool.cpp	/^Handle::Handle(int fd):fd_(fd){}$/;"	f	class:bladecoder_lib::network::Handle
INCLUDES	Makefile	/^INCLUDES=-I.\/include$/;"	m
Init	src/connect_pool.cpp	/^int ConnectPool::Init(const char *filePath)$/;"	f	class:bladecoder_lib::network::ConnectPool
LDFLAGS	Makefile	/^LDFLAGS=""$/;"	m
LIB_PATH	Makefile	/^LIB_PATH=-L. -L.\/lib$/;"	m
NamePrinter	include/class_factory.h	/^    NamePrinter():name_("Base class"){}  \/\/sometime we need default$/;"	f	class:NamePrinter
NamePrinter	include/class_factory.h	/^    explicit NamePrinter(const char *name):name_(name){}$/;"	f	class:NamePrinter
NamePrinter	include/class_factory.h	/^class NamePrinter{$/;"	c
RegistClass	include/class_factory.h	/^    static void RegistClass(const std::string &name, CreateFuntion method){$/;"	f	class:ClassFactory
Register	include/class_factory.h	/^    Register() : NamePrinter(name){(void)regist_;} $/;"	f	class:Register
Register	include/class_factory.h	/^class Register : public NamePrinter{$/;"	c
RegistyClass	include/class_factory.h	/^    RegistyClass(const std::string & name, CreateFuntion method) {$/;"	f	class:RegistyClass
RegistyClass	include/class_factory.h	/^class RegistyClass {$/;"	c
SINGLETON	include/class_factory.h	/^    void *SINGLETON(){static T instance; return &instance;}$/;"	f	namespace:create_function
SetChecker	src/connect_pool.cpp	/^int ConnectPool::SetChecker(const Checker *checker)$/;"	f	class:bladecoder_lib::network::ConnectPool
SetDispatcher	src/connect_pool.cpp	/^int ConnectPool::SetDispatcher(const Dispatcher *dispatcher)$/;"	f	class:bladecoder_lib::network::ConnectPool
Uncopyable	include/connect_pool.h	/^    Uncopyable() {}                            \/\/ and destruction of$/;"	f	class:bladecoder_lib::network::Uncopyable
Uncopyable	include/connect_pool.h	/^class Uncopyable $/;"	c	namespace:bladecoder_lib::network
__CLASS_FACTORY_H_	include/class_factory.h	48;"	d
__INCLUDE_CONNECT_POOL_H_	include/connect_pool.h	35;"	d
_getMap	include/class_factory.h	/^static ClassFactoryDict& _getMap(){$/;"	f
bladecoder_lib	include/connect_pool.h	/^namespace bladecoder_lib{ namespace network{$/;"	n
bladecoder_lib	src/connect_pool.cpp	/^namespace bladecoder_lib{ namespace network{$/;"	n	file:
create_function	include/class_factory.h	/^namespace create_function{$/;"	n
fd_	include/connect_pool.h	/^    int fd_;$/;"	m	class:bladecoder_lib::network::Handle
main	test/test_connect_pool.cpp	/^int main()$/;"	f
name_	include/class_factory.h	/^    const char *name_;$/;"	m	class:NamePrinter
network	include/connect_pool.h	/^namespace bladecoder_lib{ namespace network{$/;"	n	namespace:bladecoder_lib
network	src/connect_pool.cpp	/^namespace bladecoder_lib{ namespace network{$/;"	n	namespace:bladecoder_lib	file:
pImpl_	include/connect_pool.h	/^    ConnectPoolImplIf *pImpl_;$/;"	m	class:bladecoder_lib::network::ConnectPool
regist_	include/class_factory.h	/^    static const RegistyClass regist_;$/;"	m	class:Register
~NamePrinter	include/class_factory.h	/^    virtual ~NamePrinter(){}$/;"	f	class:NamePrinter
~Uncopyable	include/connect_pool.h	/^    ~Uncopyable() {}                           \/\/ derived objects...$/;"	f	class:bladecoder_lib::network::Uncopyable
